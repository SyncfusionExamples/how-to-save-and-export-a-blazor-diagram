@page "/"
@using Syncfusion.Blazor.Buttons
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@using Syncfusion.Blazor.Inputs
@namespace SaveAndLoad.Pages
<SfButton Content="Save" OnClick="SaveDiagram"></SfButton>
<SfButton Content="Load" OnClick="LoadDiagram"></SfButton>
<SfButton Content="Export" OnClick="ExportPNG"></SfButton>
*
<SfDiagramComponent @ref="@diagram" Height="700px" @bind-Nodes="@nodes" @bind-Connectors="@connectors">
   
</SfDiagramComponent>

<span id="diagramName" style="display:none;">DiagramComponent</span>

<SfUploader ID="UploadFiles" @ref="@uploadFiles" ShowFileList="false" AllowedExtensions="@ExtensionType">
    <UploaderEvents OnUploadStart="@OnUploadFileSelected"></UploaderEvents>
    <UploaderAsyncSettings SaveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save" RemoveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove"></UploaderAsyncSettings>
</SfUploader>

@code{

    SfDiagramComponent diagram;
    SfUploader uploadFiles;
    private string data;
    private string fileName;
    private string ExtensionType = ".json";

    private async Task ExportPNG()
    {
        DiagramExportSettings export = new DiagramExportSettings();
        await diagram.ExportAsync("diagram", DiagramExportFormat.PNG, export);
    }
    
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
    private async void SaveDiagram()
    {
        //data = diagram.SaveDiagram();
        fileName= await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
        await DownloadDiagram(fileName);
    }
    public async Task DownloadDiagram(string fileName)
    {
        data = diagram.SaveDiagram();
        await FileUtil.SaveAs(jsRuntime, data, fileName);
    }

    private async void LoadDiagram()
    {
        // await diagram.LoadDiagram(data);
        diagram.BeginUpdate();
        ExtensionType = ".json";
        await FileUtil.Click(jsRuntime);
        await diagram.EndUpdate();
    }
    public async Task OnUploadFileSelected(UploadingEventArgs args)
    {
        if(args.FileData.Type == "json")
        {
            string json = await FileUtil.LoadFile(jsRuntime, args.FileData);
            json = json.Replace(System.Environment.NewLine, string.Empty);
            await diagram.LoadDiagram(json.ToString());
            await uploadFiles.ClearAllAsync();
        }
    }
    protected override void OnInitialized()
    {
        Node node1 = new Node()
            {
                ID = "node1",
                Width = 140,
                Height = 40,
                OffsetX = 440,
                OffsetY = 80,
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse },
                Style = new ShapeStyle() { Fill = "#6495ED" },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                         Content ="Start"

                    }
                }
            };
        nodes.Add(node1);

        Node node2 = new Node()
            {
                ID = "node2",
                Width = 200,
                Height = 40,
                OffsetX = 440,
                OffsetY = 180,
                Style = new ShapeStyle() { Fill = "#6495ED" },
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Parallelogram },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content ="Enter a variable"
                     }
                }
            };
        nodes.Add(node2);

        Node node3 = new Node()
            {
                ID = "node3",
                Width = 160,
                Height = 60,
                OffsetX = 440,
                OffsetY = 270,
                Style = new ShapeStyle() { Fill = "#6495ED" },
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Diamond },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content ="N divisible by 2"
                    }
                }
            };
        nodes.Add(node3);

        Node node4 = new Node()
            {
                ID = "node4",
                Width = 160,
                Height = 40,
                OffsetX = 700,
                OffsetY = 270,
                Style = new ShapeStyle() { Fill = "#6495ED" },
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content ="Odd number",
                        Style = new TextStyle()
                        {
                            Color="red",
                            Bold = true,
                            Italic = false
                        }
                    }
                }
            };
        nodes.Add(node4);

        Node node5 = new Node()
            {
                ID = "node5",
                Width = 160,
                Height = 40,
                OffsetX = 440,
                OffsetY = 380,
                Style = new ShapeStyle() { Fill = "#6495ED" },
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content ="Even number",
                        Style = new TextStyle()
                        {
                            Color="#006400",
                            Bold = true,
                            Italic = false
                        }
                    }
                }

            };
        nodes.Add(node5);
        Node node6 = new Node()
            {
                ID = "node6",
                Width = 140,
                Height = 40,
                OffsetX = 440,
                OffsetY = 480,
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse },
                Style = new ShapeStyle() { Fill = "#6495ED" },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content ="End"
                    }
                }
            };
        nodes.Add(node6);
        connectors = new DiagramObjectCollection<Connector>();
        Connector connector = new Connector()
            {
                SourceID = "node1",
                TargetID = "node2",
                Style = new TextStyle() { StrokeColor = "#6495ED" },

            };
        connectors.Add(connector);
        Connector connector1 = new Connector()
            {
                SourceID = "node2",
                TargetID = "node3",
                Style = new TextStyle()
                {
                    StrokeColor = "#6495ED"
                },

            };
        connectors.Add(connector1);
        Connector connector2 = new Connector()
            {
                SourceID = "node3",
                TargetID = "node4",
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                Annotations = new DiagramObjectCollection<PathAnnotation>()
                {
                    new PathAnnotation
                    {
                        Content = "false",
                        Alignment = AnnotationAlignment.Before,
                        Displacement = new DiagramPoint() {X=5, Y=5}
                    }
                }
            };
        connectors.Add(connector2);
        Connector connector3 = new Connector()
            {
                SourceID = "node3",
                TargetID = "node5",
                Style = new TextStyle() { StrokeColor = "#6495ED" },
                Annotations = new DiagramObjectCollection<PathAnnotation>()
                {
                    new PathAnnotation
                    {
                        Content = "true",
                        Alignment = AnnotationAlignment.After,
                        Displacement = new DiagramPoint() {X=5, Y=5},

                    }
                }
            };
        connectors.Add(connector3);
        Connector connector4 = new Connector()
            {
                SourceID = "node5",
                TargetID = "node6",
                Style = new TextStyle() { StrokeColor = "#6495ED" }

            };
        connectors.Add(connector4);
    }
    }

<style>
    .e-file-select-wrap {
        display: none;
    }
</style>